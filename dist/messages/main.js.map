{"version":3,"sources":["./src/environments/environment.ts","./src/app/auth/auth.guard.ts","./src/app/auth/signup/signup.component.ts","./src/app/auth/signup/signup.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/messages/messages.service.ts","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/messages/add-message/add-message.component.ts","./src/app/messages/add-message/add-message.component.html","./src/app/auth/auth-interceptor.ts","./src/app/messages/messages-list/messages-list.component.ts","./src/app/messages/messages-list/messages-list.component.html","./src/app/auth/auth.service.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:5000/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const isAuth = this.authService.getIsAuth();\n    if (!isAuth) {\n     this.router.navigate(['/login']);\n    }\n    return isAuth;\n  }\n\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n//import { AuthService } from '../auth.service';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../auth.service';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit, OnDestroy {\n  signupForm: FormGroup;\n  isLoading = false;\n  authSubscription: Subscription;\n  isErrorOnLogin = false;\n  prohibittedEmail = false;\n  infoMessage = 'The data you provided is incorrect';\n\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.signupForm = new FormGroup({\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      password: new FormControl(null, [Validators.required, Validators.minLength(6)]),\n    });\n\n    this.authSubscription = this.authService.getAuthStatusListener().subscribe(authStatus => {\n      this.isLoading = authStatus;\n      if (!authStatus) {\n        this.prohibittedEmail = true;\n      }\n      this.isErrorOnLogin = true;\n    });\n  }\n\n  onHandleError() {\n    this.isErrorOnLogin = null;\n  }\n\n  onSignup() {\n    if (this.signupForm.value.email === '' || this.signupForm.value.password === '') {\n      return;\n    }\n    this.isLoading = true;\n    this.authService.createUser(this.signupForm.value.email, this.signupForm.value.password);\n  }\n\n  ngOnDestroy() {\n    this.authSubscription.unsubscribe();\n  }\n\n}\n","<div class=\"d-flex justify-content-center\" *ngIf='isLoading'>\n  <div class=\"spinner-border\" role=\"status\">\n    <span class=\"sr-only\">Loading...</span>\n  </div>\n</div>\n<div class=\"login\">\n  <div class=\"login-header\">\n    <h1>Signup</h1>\n  </div>\n  <form [formGroup]=\"signupForm\" (ngSubmit)=\"onSignup()\" *ngIf='!isLoading'>\n    <div class=\"login-form\">\n      <h4>ENTER YOUR EMAIL</h4>\n      <input\n        type=\"email\"\n        class=\"input\"\n        formControlName='email'>\n        <br>\n      <span *ngIf=\"!signupForm.get('email').valid && signupForm.get('email').touched\" class=\"help-block\">Please enter a valid email address</span>\n      <h4>ENTER YOUR PASSWORD</h4>\n      <input\n        type=\"password\"\n        minlength=5\n        class=\"input\"\n        formControlName=\"password\">\n      <br>\n      <span *ngIf=\"!signupForm.get('password').valid && signupForm.get('password').touched\" class=\"help-block\">Your password must be at least 6 characters long\n      </span>\n      <br>\n      <button type=\"submit\" class='login-button'>SIGNUP</button>\n      <br>\n      <span *ngIf=\"!signupForm.valid && signupForm.touched\" class=\"help-block\">You must fill in the form correctly</span>\n      <h2 class=\"text-danger\" *ngIf='prohibittedEmail'>You are trying to use an email that is being used already</h2>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './auth/auth.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'messages';\n  constructor(private authService: AuthService) {}\n\n  ngOnInit() {\n    this.authService.autoAuthUser();\n  }\n\n}\n","<app-header></app-header>\n<div class=\"container\">\n    <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { AddMessageComponent } from './messages/add-message/add-message.component';\nimport { HeaderComponent } from './header/header.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { MessagesListComponent } from './messages/messages-list/messages-list.component';\nimport { LoginComponent } from './auth/login/login.component';\nimport { SignupComponent } from './auth/signup/signup.component';\nimport { AuthInterceptor } from './auth/auth-interceptor';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AddMessageComponent,\n    HeaderComponent,\n    MessagesListComponent,\n    LoginComponent,\n    SignupComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    NgbModule,\n    RouterModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [{provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true}] ,\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  loginForm: FormGroup;\n  isLoading = false;\n  authSubscription: Subscription;\n  isErrorOnLogin = false;\n  infoMessage = 'Login Problem';\n\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.loginForm = new FormGroup({\n      email: new FormControl(null, [Validators.required, Validators.email ]),\n      password: new FormControl(null, [Validators.required, Validators.minLength(6)])\n    });\n\n    this.authSubscription = this.authService.getAuthStatusListener().subscribe(authStatus => {\n      this.isLoading = authStatus;\n      this.isErrorOnLogin = true;\n    });\n  }\n\n  onHandleError() {\n    this.isErrorOnLogin = null;\n  }\n\n  onLogin() {\n    if (this.loginForm.value.email === '' || this.loginForm.value.password === '') {\n      return;\n    }\n    this.isLoading = true;\n    this.authService.login(this.loginForm.value.email, this.loginForm.value.password);\n  }\n\n  ngOnDestroy() {\n    this.authSubscription.unsubscribe();\n  }\n\n}\n","\n  <div class=\"d-flex justify-content-center\" *ngIf='isLoading'>\n    <div class=\"spinner-border\" role=\"status\">\n      <span class=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n  <div class=\"login\">\n    <div class=\"login-header\">\n      <h1>Login</h1>\n    </div>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\" *ngIf='!isLoading'>\n      <div class=\"login-form\">\n        <h4>ENTER YOUR EMAIL</h4>\n        <input\n          type=\"email\"\n          class=\"input\"\n          formControlName='email'>\n        <br>\n        <span *ngIf=\"!loginForm.get('email').valid && loginForm.get('email').touched\" class=\"help-block\">Please enter a valid email address</span>\n        <h4>ENTER YOUR PASSWORD</h4>\n        <input\n          type=\"password\"\n          class=\"input\"\n          formControlName=\"password\">\n        <br>\n        <span *ngIf=\"!loginForm.get('password').valid && loginForm.get('password').touched\" class=\"help-block\">Your password must be at least 6 characters long\n        </span>\n        <button type=\"submit\" class='login-button'>LOGIN</button>\n        <br>\n        <a class=\"sign-up\" routerLink=\"/signup\">Sign Up!</a>\n        <br>\n        <span *ngIf=\"!loginForm.valid && loginForm.touched\" class=\"help-block\">You must fill in the form correctly</span>\n      </div>\n    </form>\n  </div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Email } from '../models/email.model';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessagesService {\n  private messages: Email[] = [];\n  private updatedMessages = new Subject<Email[]>();\n  private deleteMessages = new Subject<Email[]>();\n  private infoMessage = new Subject();\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n\n  getMessagesUpdateListener() {\n    return this.updatedMessages.asObservable();\n  }\n\n  getMessageDeleteListener() {\n    return this.deleteMessages.asObservable();\n  }\n\n  getInfoMessage() {\n    return this.infoMessage.asObservable();\n  }\n\n  addEmail(email) {\n    this.http.post<{message: string, email: Email}>( `user/new-message`, email)\n      .subscribe((responseData) => {\n        this.infoMessage.next(responseData.message);\n      });\n  }\n\n  getMessages() {\n    this.http.get<{sentMessages: {sentMessages: Email[]}, recievedMessages: {recievedMessages: Email[]}}>( `user/get-messages`)\n      .subscribe((responseData) => {\n        this.messages = [...responseData.sentMessages.sentMessages, ...responseData.recievedMessages.recievedMessages];\n        this.updatedMessages.next([...this.messages]);\n      });\n  }\n\n  deleteMessage(id, messageStatus) {\n    this.http.delete<{message: string, body: Email[]}>( `user/delete-message/${id}/${messageStatus}`)\n      .subscribe(() => {\n        const updatedMessages = this.messages.filter(message => message._id !== id);\n        this.messages = updatedMessages;\n        this.deleteMessages.next([...this.messages]);\n      });\n  }\n}\n\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../auth/auth.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit, OnDestroy {\n  private authListenerSubscription: Subscription;\n  userIsAuthenticated = false;\n\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.authListenerSubscription = this.authService.getAuthStatusListener().subscribe(isAuthenticated => {\n      this.userIsAuthenticated = isAuthenticated;\n      console.log(this.userIsAuthenticated);\n    })\n  }\n\n  onLogout() {\n    this.authService.logout();\n  }\n\n  ngOnDestroy() {\n    this.authListenerSubscription.unsubscribe();\n  }\n\n}\n"," <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n  <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n    <ul class=\"navbar-nav\">\n      <li *ngIf=\"userIsAuthenticated\" class=\"nav-item active\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/add-message\">Add a message<span class=\"sr-only\">(current)</span></a>\n      </li>\n      <li class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/show-messages\">Show messages</a>\n      </li>\n      <li *ngIf=\"!userIsAuthenticated\" class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/login\">Login</a>\n      </li>\n      <li *ngIf=\"!userIsAuthenticated\" class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/signup\">Signup</a>\n      </li>\n      <li *ngIf=\"userIsAuthenticated\" class=\"nav-item\" routerLinkActive=\"active\" (click)=\"onLogout()\">\n        <button class=\"nav-link\">Logout</button>\n      </li>\n    </ul>\n  </div>\n</nav>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport { Email } from 'src/app/models/email.model';\nimport { MessagesService } from '../messages.service';\n\n@Component({\n  selector: 'app-add-message',\n  templateUrl: './add-message.component.html',\n  styleUrls: ['./add-message.component.css']\n})\nexport class AddMessageComponent implements OnInit {\n  messageForm: FormGroup;\n  submitButtonClicked = false;\n  infoMessage: String;\n  messageClass: Boolean;\n  currentUserId: String;\n\n  constructor(private messagesService: MessagesService, private authService: AuthService) {}\n\n  ngOnInit(): void {\n    this.currentUserId = this.authService.getUserId();\n    this.messageForm = new FormGroup({\n      'subject': new FormControl(null, [Validators.required, Validators.minLength(2), Validators.maxLength(150)]),\n      'content': new FormControl(null, [Validators.required, Validators.minLength(2), Validators.maxLength(2000)]),\n      'recieverId': new FormControl(null, [Validators.required]),\n      'senderId': new FormControl(null, [Validators.required]),\n    });\n    this.messagesService.getInfoMessage().subscribe((message: String) => {\n      console.log(message);\n      if (message === 'message was added') {\n        this.infoMessage = 'Your message was sent';\n        this.messageClass = false;\n      } else {\n        this.infoMessage = 'Your message failed was not sent, please try again';\n        this.messageClass = true;\n      }\n    });\n  }\n\n  onAddEmail() {\n    if (this.messageForm.invalid) {\n      this.submitButtonClicked = true;\n      return;\n    }\n    const email: Email = {\n      subject: this.messageForm.value.subject,\n      content: this.messageForm.value.content,\n      recieverId: this.messageForm.value.recieverId,\n      senderId: this.messageForm.value.senderId,\n      date: Date.now(),\n      _id: null\n    }\n\n    this.messagesService.addEmail(email);\n    //const info = this.messagesService.getInfoMessage();\n    this.messageForm.setValue({\n      subject: '',\n      content: '',\n      recieverId: '',\n      senderId: this.currentUserId,\n    });\n    this.messageForm.markAsPristine();\n    this.messageForm.markAsUntouched();\n  }\n\n}\n","<form [formGroup]=\"messageForm\" (ngSubmit)=\"onAddEmail()\">\n  <div class=\"form-group\">\n    <label for=\"subject\">Subject</label>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      id=\"subject\"\n      placeholder=\"Enter subject\"\n      formControlName=\"subject\">\n      <span class='text-danger' *ngIf='messageForm.controls.subject.invalid && messageForm.controls.subject.touched'>This field cannot be left empty!</span>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"content\">Message</label>\n    <textarea\n      type=\"text\"\n      class=\"form-control\"\n      id=\"content\"\n      placeholder=\"Enter Content\"\n      formControlName=\"content\">\n    </textarea>\n    <span class='text-danger' *ngIf='messageForm.controls.content.invalid && messageForm.controls.content.touched'>This field cannot be left empty!</span>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"senderId\">Sender ID</label>\n    <input\n      type=\"string\"\n      id=\"senderId\"\n      [(ngModel)]=\"currentUserId\"\n      class=\"form-control\"\n      placeholder={{[(currentUserId)]}}\n      formControlName=\"senderId\"\n      disabled>\n      <span class='text-danger' *ngIf='messageForm.controls.senderId.invalid && messageForm.controls.senderId.touched'>This field cannot be left empty!</span>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"recieverId\">Reciever ID</label>\n    <input\n      type=\"string\"\n      class=\"form-control\"\n      id=\"recieverId\"\n      placeholder=\"Enter reciever ID\"\n      formControlName=\"recieverId\">\n      <span class=\"text-danger\" *ngIf=\"messageForm.controls.recieverId.invalid && messageForm.controls.recieverId.touched\">This field cannot be left empty!</span>\n  </div>\n  <h6 *ngIf=\"!messageForm.valid && messageForm.touched && submitButtonClicked\" class=\"help-block wrong-input\">You must fill in the form correctly</h6>\n  <button class=\"btn btn-primary\" type=\"submit\">Send Email</button>\n</form>\n<span class=\"text-center\" [ngClass]=\" messageClass ? 'text-danger' : 'text-success'\">{{infoMessage}}</span>\n","import { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';\n\n@Injectable()\n\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    const authToken = this.authService.getToken();\n    const authRequest = req.clone({\n      headers: req.headers.set('Authorization', 'Bearer ' + authToken)\n    });\n    return next.handle(authRequest);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport { Email } from 'src/app/models/email.model';\nimport { MessagesService } from '../messages.service';\n\n@Component({\n  selector: 'app-messages-list',\n  templateUrl: './messages-list.component.html',\n  styleUrls: ['./messages-list.component.css']\n})\nexport class MessagesListComponent implements OnInit, OnDestroy {\n  messagesSubscription: Subscription;\n  onDeleteMessageSubscription: Subscription;\n  authStatusSubscription: Subscription;\n  inputValue: Boolean = true;\n  allMessages: Email[] = [];\n  sentMessages: Email[] = [];\n  recievedMessages: Email[] = [];\n  currentUserId: String;\n  userIsAuthenticated = false;\n  onDeleteMessageInfo: Boolean = false;\n\n\n  constructor(private messagesService: MessagesService, private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.messagesService.getMessages();\n    this.currentUserId = this.authService.getUserId();\n    this.messagesSubscription = this.messagesService.getMessagesUpdateListener().subscribe((responseData) => {\n      this.allMessages = responseData;\n    });\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.authStatusSubscription = this.authService.getAuthStatusListener().subscribe(isAuthenticated => {\n      this.userIsAuthenticated = isAuthenticated;\n    });\n\n    this.onDeleteMessageSubscription = this.messagesService.getMessageDeleteListener().subscribe( (message: Email[]) => {\n      this.allMessages = message;\n      this.searchItems(this.currentUserId);\n      this.onDeleteMessageInfo = true;\n      setTimeout(() => {\n        this.onDeleteMessageInfo = false;;\n      }, 5000);\n    })\n  }\n\n  searchItems(id) {\n    if (id.value) {\n      id = id.value;\n    }\n    this.inputValue = true;\n    //this.currentUserId = this.authService.getUserId();\n    this.recievedMessages = this.allMessages.filter((message) =>  message.senderId != id);\n    this.sentMessages = this.allMessages.filter((message) => message.senderId == id);\n  }\n\n  deleteMessage(idToDelete, messageStatus) {\n    this.messagesService.deleteMessage(idToDelete, messageStatus);\n  }\n\n  ngOnDestroy() {\n    this.messagesSubscription.unsubscribe();\n    this.onDeleteMessageSubscription.unsubscribe();\n    this.authStatusSubscription.unsubscribe();\n  }\n\n}\n","<h2 class=\"text-center mb-5\">Messages List</h2>\n<input type=\"string\" [(ngModel)]=\"currentUserId\" class=\"form-control w-50\" placeholder={{[(currentUserId)]}} #search disabled>\n\n<button class=\"btn btn-info mr-3 mt-3\" type=\"button\" (click)='searchItems(search)'>\n  Search<i class=\"fa fa-search\"></i>\n</button>\n<p class='text-danger' *ngIf='!inputValue'>Please enter sender Id</p>\n<p class='text-success' *ngIf='onDeleteMessageInfo'>Message was deleted!</p>\n<div class=\"row\">\n  <div class=\"col-sm-6 col-md-6\" >\n    <h4 class=\"text-center\">Sent Messages</h4>\n      <div class=\"alert-message alert-message-success border p-3\" *ngFor='let message of sentMessages'>\n          <h4>{{message.subject}}</h4>\n          <span>Date: {{message.date}}</span>\n          <button\n            type=\"button\"\n            class=\"close text-danger\"\n            aria-label=\"Close\"\n            (click)=\"deleteMessage(message._id, 'sent')\"\n          >\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n          <p>{{message.content}}</p>\n      </div>\n  </div>\n  <div class=\"col-sm-6 col-md-6\">\n    <h4 class=\"text-center\">Received Messages</h4>\n    <div class=\"alert-message alert-message-success border p-3\" *ngFor='let message of recievedMessages'>\n      <h4>Subject: {{message.subject}}</h4>\n      <span>Date: {{message.date}}</span>\n      <button\n        type=\"button\"\n        class=\"close text-danger\"\n        aria-label=\"Close\"\n        (click)=\"deleteMessage(message._id, 'recieved')\"\n      >\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n      <p>{{message.content}}</p>\n  </div>\n  </div>\n</div>\n\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { AuthData } from './auth-data.module';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isAuthenticated = false;\n  private userId: string;\n  private token: string;\n  private tokenTimer: any;\n  private authStatusListener = new Subject<boolean>();\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  getToken() {\n    return this.token;\n  }\n\n  getUserId() {\n    return this.userId;\n  }\n\n  getIsAuth() {\n    return this.isAuthenticated;\n  }\n\n  getAuthStatusListener() {\n    return this.authStatusListener.asObservable();\n  }\n\n  createUser(email: string, password: string) {\n    const authData: AuthData = {\n      email,\n      password\n    }\n    this.http.post<{}>( `signup`, authData)\n      .subscribe((responseData) => {\n        console.log(responseData);\n        this.router.navigate(['/']);\n        this.authStatusListener.next();\n      }, err => {\n        this.authStatusListener.next(false)\n      });\n  }\n\n  login(email: string, password: string) {\n    const authData: AuthData = {\n      email,\n      password\n    }\n    this.http.post<{token: string, expiresIn: number, userId: string, errors: string}>( `login`, authData)\n      .subscribe((responseData) => {\n        this.token = responseData.token;\n        if (this.token) {\n          this.userId = responseData.userId;\n          this.isAuthenticated = true;\n          this.authStatusListener.next(true);\n          const expiresIn = responseData.expiresIn;\n          this.setAuthTimer(expiresIn);\n          const now = new Date();\n          const expirationDate = new Date(now.getTime() + expiresIn * 1000);\n          this.saveAuthData(this.token, expirationDate, this.userId);\n          this.router.navigate(['/']);\n        }\n      }, err => {\n        this.authStatusListener.next(false);\n      });\n  }\n\n  autoAuthUser() {\n    const authInformation = this.getAuthData();\n    const now = new Date();\n    if (!authInformation) {\n      return;\n    }\n    const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\n    if (expiresIn > 0) {\n      this.token = authInformation.token;\n      this.isAuthenticated = true;\n      this.userId = authInformation.userId;\n      this.setAuthTimer(expiresIn / 1000);\n      this.authStatusListener.next(true);\n    }\n  }\n\n  private getAuthData() {\n    const token = localStorage.getItem('token');\n    const expirtationDate = localStorage.getItem('expiration');\n    const userId = localStorage.getItem('userId');\n\n    if (!token || !expirtationDate) {\n      return;\n    }\n    return {\n      token,\n      expirationDate: new Date(expirtationDate),\n      userId: userId\n    };\n  }\n\n  logout() {\n    this.token = null;\n    this.isAuthenticated = false;\n    this.authStatusListener.next(false);\n    this.userId = null;\n    clearTimeout(this.tokenTimer);\n    this.clearAuthData();\n    this.router.navigate(['/']);\n  }\n\n  private setAuthTimer (duration: number) {\n    this.tokenTimer = setTimeout(() => {\n      this.logout();\n    }, duration * 1000);\n  }\n\n  private saveAuthData(token: string, expirationDate: Date, userId: string) {\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expiration\", expirationDate.toISOString());\n    localStorage.setItem(\"userId\", userId);\n  }\n\n  private clearAuthData() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expiration\");\n    localStorage.removeItem(\"userId\");\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthGuard } from './auth/auth.guard';\nimport { LoginComponent } from './auth/login/login.component';\nimport { SignupComponent } from './auth/signup/signup.component';\nimport { AddMessageComponent } from './messages/add-message/add-message.component';\nimport { MessagesListComponent } from './messages/messages-list/messages-list.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/show-messages', pathMatch: 'full'},\n  { path: 'add-message', component: AddMessageComponent, canActivate: [AuthGuard]},\n  { path: 'show-messages', component: MessagesListComponent, canActivate: [AuthGuard]},\n  { path: 'login', component: LoginComponent},\n  { path: 'signup', component: SignupComponent},\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes),\n    CommonModule\n  ],\n  exports: [RouterModule],\n  providers: [AuthGuard]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}